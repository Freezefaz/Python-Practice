
## Data Breakdown Resale Transaction of 3,4 and 5 Room Flats from 2006 to 2018 ##

import numpy as np
import matplotlib.pyplot as plt

title = "Resale Transaction of 3,4 and 5 Room Flats from 2006 to 2018"
titlelen = len(title)
print("{:*^{titlelen}}".format(title, titlelen=titlelen+6))
print()

data = np.genfromtxt('D:\\resaletransactionsbyflattypebasedonregisteredcases.csv',
                               skip_header=1, 
                               dtype=[('financial_year','i8'),('flat_type','U10'), 
                                      ('resale_transactions', 'i8')], delimiter=",",
                               
                     missing_values=['na','NA','-'],filling_values=[0])

print("There are {} rows in this dataset".format(len(data)))
print()

# split data into flat types
data_3room = data['flat_type'] == '3 room'
print("There are {} rows in 3 Room Data".format(len(data[data_3room])))
print()
print(str(len(np.unique(data[data_3room]['financial_year']))) + " unique values in financial year column")
print(str(len(np.unique(data[data_3room]['flat_type']))) + " unique values in flat type column")
print(str(len(np.unique(data[data_3room]['resale_transactions']))) + " unique values in resale transactions column")

# # finding the max and min values of resale price
max_value = np.max(data[data_3room]['resale_transactions'])
min_value = np.min(data[data_3room]['resale_transactions'])   
mean_value = np.mean(data[data_3room]['resale_transactions'])

print("The mean resale transactions is {:.0f}".format(mean_value))
print("The highest resale transactions is {:.0f}".format(max_value))
print("The lowest resale transactions is {:.0f}".format(min_value))
print()

data_4room = data['flat_type'] == '4 room'
print("There are {} rows in 4 Room Data".format(len(data[data_4room])))
print()
print(str(len(np.unique(data[data_4room]['financial_year']))) + " unique values in financial year column")
print(str(len(np.unique(data[data_4room]['flat_type']))) + " unique values in flat type column")
print(str(len(np.unique(data[data_4room]['resale_transactions']))) + " unique values in resale transactions column")

# # finding the max and min values of resale price
max_value = np.max(data[data_4room]['resale_transactions'])
min_value = np.min(data[data_4room]['resale_transactions'])   
mean_value = np.mean(data[data_4room]['resale_transactions'])

print("The mean resale transactions is {:.0f}".format(mean_value))
print("The highest resale transactions is {:.0f}".format(max_value))
print("The lowest resale transactions is {:.0f}".format(min_value))
print()

data_5room = data['flat_type'] == '5 room' # split data into 5 room
print("There are {} rows in 5 Room Data".format(len(data[data_5room])))
print()
print(str(len(np.unique(data[data_5room]['financial_year']))) + " unique values in financial year column")
print(str(len(np.unique(data[data_5room]['flat_type']))) + " unique values in flat type column")
print(str(len(np.unique(data[data_5room]['resale_transactions']))) + " unique values in resale transactions column")

# # finding the max and min values of resale price
max_value = np.max(data[data_5room]['resale_transactions'])
min_value = np.min(data[data_5room]['resale_transactions'])   
mean_value = np.mean(data[data_5room]['resale_transactions'])

print("The mean resale transactions is {:.0f}".format(mean_value))
print("The highest resale transactions is {:.0f}".format(max_value))
print("The lowest resale transactions is {:.0f}".format(min_value))


## Data Breakdown of Median price of resale flats in 2019 ##

import numpy as np
import matplotlib.pyplot as plt

title = "Median price of resale flats in 2019"
titlelen = len(title)
print("{:*^{titlelen}}".format(title, titlelen=titlelen+6))
print()

data = np.genfromtxt('D:\\medianresalepricestownandflattype.csv', # need to use \\ not \ if not cannot work
                               skip_header=1, 
                               dtype=[('quarter','U10'),  ('town','U50'),('flat_type','U10'), 
                                      ('price', 'f8')], delimiter=",",
                               
                     missing_values=['na','NA','-'],filling_values=[0])

print("There are {} rows in this dataset".format(len(data)))
print()

# print(data.shape)
# print(data) 
# print()

data_2019 = data[7332:] # split data into 2019
print("There are {} rows in Data 2019".format(len(data_2019)))
print()

# filter out only 2019 columns
quarter_2019 = data_2019['quarter'] 
town_2019 = data_2019['town']
flat_types_2019 = data_2019['flat_type']
resale_price_2019 = data_2019['price']
resale_price_2019 = resale_price_2019[~np.isnan(resale_price_2019)] # remove nan values for arthimetic purposes

# finding unique values in each column
print(str(len(np.unique(quarter_2019))) + " unique values in month column")
print(str(len(np.unique(town_2019))) + " unique values in town column")
print(str(len(np.unique(flat_types_2019))) + " unique values in flat types column")
print(str(len(np.unique(resale_price_2019))) + " unique values in resale price column")
print()

# finding the max and min values of resale price
max_value = np.max(resale_price_2019)
min_value = np.min(resale_price_2019)   
mean_value = np.mean(resale_price_2019)
std = np.std(resale_price_2019)

print("The mean median resale price in 2019 is ${:.0f}".format(mean_value))
print("The highest median resale price in 2019 is ${:.0f}".format(max_value))
print("The lowest median resale price in 2019 is ${:.0f}".format(min_value))
print("The standard deviation is ${:.0f}".format(std))


## Data Breakdown Price of resale flats in 2019 ##

import numpy as np
import matplotlib.pyplot as plt

title = "Price of resale flats in 2019"
titlelen = len(title)
print("{:*^{titlelen}}".format(title, titlelen=titlelen+6))
print()

data = np.genfromtxt('D:\\resaleflatpricesjan2017.csv', # need to use \\ not \ if not cannot work
                               skip_header=1, 
                               dtype=[('month','U10'),  ('town','U50'),('flat_types','U10'), 
                                      ('resale_price', 'f8')],usecols = (0,1,2,10), delimiter=",",
                               
                     missing_values=['na','-'],filling_values=[0])

print("There are {} rows in this dataset".format(len(data)))
print()

data_2019 = data[41914:] # split data into 2019
# print(data_2019)
print("There are {} rows in Data 2019".format(len(data_2019)))
print()

# filter out only 2019 columns
month_2019 = data_2019['month'] 
town_2019 = data_2019['town']
flat_types_2019 = data_2019['flat_types']
resale_price_2019 = data_2019['resale_price']

# finding unique values in each column
print(str(len(np.unique(month_2019))) + " unique values in month column")
print(str(len(np.unique(town_2019))) + " unique values in town column")
print(str(len(np.unique(flat_types_2019))) + " unique values in flat types column")
print(str(len(np.unique(resale_price_2019))) + " unique values in resale price column")
print()

# finding the max and min values of resale price
max_value = np.max(resale_price_2019)
min_value = np.min(resale_price_2019)   
mean_value = np.mean(resale_price_2019)
std = np.std(resale_price_2019)

print("The mean resale price in 2019 is ${:.0f}".format(mean_value))
print("The highest resale price in 2019 is ${:.0f}".format(max_value))
print("The lowest resale price in 2019 is ${:.0f}".format(min_value))
print("The standard deviation is ${:.0f}".format(std))


## Resale Transaction of 3,4 and 5 Room Flats from 2006 to 2018 ##

import numpy as np
import matplotlib.pyplot as plt

# title = "Resale Transaction of 3,4 and 5 Room Flats from 2006 to 2018"
# titlelen = len(title)
# print("{:*^{titlelen}}".format(title, titlelen=titlelen+6))
# print()

data = np.genfromtxt('D:\\resaletransactionsbyflattypebasedonregisteredcases.csv', 
                               skip_header=1, 
                               dtype=[('financial_year','i8'),('flat_type','U10'), 
                                      ('resale_transactions', 'i8')], delimiter=",",
                               
                     missing_values=['na','NA','-'],filling_values=[0])

# split data into rooms
data_3room = data['flat_type'] == '3 room'
data_4room = data['flat_type'] == '4 room'
data_5room = data['flat_type'] == '5 room' 

# derive variables for x and y axis
x_3 = data[data_3room]['financial_year']
y_3 = data[data_3room]['resale_transactions']
x_4 = data[data_4room]['financial_year']
y_4 = data[data_4room]['resale_transactions']
x_5 = data[data_5room]['financial_year']
y_5 = data[data_5room]['resale_transactions']

# Plot scatterplot
fig = plt.figure(figsize=(10,10))
ax1 = fig.add_subplot(111)
ax1.scatter(x_3 , y_3 , s = 50, c = 'red', marker = "*", label = '3 Room')
ax1.scatter(x_4 , y_4 , s = 50, c = 'blue', marker = "D", label = '4 Room')
ax1.scatter(x_5, y_5, s = 50, c = 'green', marker = "o", label = '5 Room')

# Get legend outside of 
plt.legend(loc='center left', bbox_to_anchor=(1, 0.5)); 
# Plot connecting lines and x and y labels
plt.plot(x_3, y_3, '.r:')
plt.plot(x_4, y_4, '.b:')
plt.plot(x_5, y_5, '.g:')
plt.title('Resale Transactions of 3,4 and 5 Room Flats from 2006 to 2018', fontsize = 20)
plt.xlabel('Year', fontsize = 20)
plt.ylabel('Resale Transactions', fontsize = 20)

plt.show()


## Median price of North East 5 Room resale flats in 2019 ##

import numpy as np
import matplotlib.pyplot as plt

# title = "Median price of resale flats in 2019"
# titlelen = len(title)
# print("{:*^{titlelen}}".format(title, titlelen=titlelen+6))
# print()

data = np.genfromtxt('D:\\medianresalepricestownandflattype.csv', # need to use \\ not \ if not cannot work
                               skip_header=1, 
                               dtype=[('quarter','U10'),  ('town','U50'),('flat_type','U10'), 
                                      ('price', 'f8')], delimiter=",",
                               
                     missing_values=['na','NA','-'],filling_values=[0])

# Split data into 2019
data_2019 = data[7332:] 
# Split data by towns
amk = (data_2019['town'] == 'ANG MO KIO') 
bishan = (data_2019['town'] == 'BISHAN')
hougang = (data_2019['town'] == 'HOUGANG')
punggol = (data_2019['town'] == 'PUNGGOL')
sengkang = (data_2019['town'] == 'SENGKANG')
toapayoh = (data_2019['town'] == 'TOA PAYOH')

# Get variable for x and y axis
x_amk = data_2019[amk][data_2019[amk]['flat_type']=='5-ROOM']['quarter']
y_amk = data_2019[amk][data_2019[amk]['flat_type']=='5-ROOM']['price']
x_bishan = data_2019[bishan][data_2019[bishan]['flat_type']=='5-ROOM']['quarter']
y_bishan = data_2019[bishan][data_2019[bishan]['flat_type']=='5-ROOM']['price']
x_hougang = data_2019[hougang][data_2019[hougang]['flat_type']=='5-ROOM']['quarter']
y_hougang = data_2019[hougang][data_2019[hougang]['flat_type']=='5-ROOM']['price']
x_punggol = data_2019[punggol][data_2019[punggol]['flat_type'] == '5-ROOM']['quarter']
y_punggol = data_2019[punggol][data_2019[punggol]['flat_type'] == '5-ROOM']['price']
x_sengkang = data_2019[sengkang][data_2019[sengkang]['flat_type'] == '5-ROOM']['quarter']
y_sengkang = data_2019[sengkang][data_2019[sengkang]['flat_type'] == '5-ROOM']['price']
x_toapayoh = data_2019[toapayoh][data_2019[toapayoh]['flat_type'] == '5-ROOM']['quarter']
y_toapayoh = data_2019[toapayoh][data_2019[toapayoh]['flat_type'] == '5-ROOM']['price']

fig = plt.figure(figsize=(10,10))
ax1 = fig.add_subplot(111)

# Plot line graph and differentiate colors
ax1.plot(x_amk,y_amk, c='r', label = 'Ang Mo Kio')
ax1.plot(x_bishan, y_bishan, c='b', label = 'Bishan')
ax1.plot(x_hougang, y_hougang, c='g', label = 'Hougang')
ax1.plot(x_punggol,y_punggol, c='c', label = 'Punggol')
ax1.plot(x_sengkang,y_sengkang, c='y', label = 'Sengkang')
ax1.plot(x_toapayoh,y_toapayoh, c='m', label = 'Toa Payoh')

# Plot title and legend
plt.title('Median price of North East 5 Room Flats In 2019', fontsize = 20)
plt.xlabel('Quarter', fontsize = 20)
plt.ylabel('Resale Price ($)', fontsize = 20)
plt.legend(loc='center left', bbox_to_anchor=(1, 0.5))

plt.show()


## Number of North East 5 Room Resale HDB sold in 2019 ##

import numpy as np
import matplotlib.pyplot as plt

# title = "Number of North-East resale flats bought in 2019"
# titlelen = len(title)
# print("{:*^{titlelen}}".format(title, titlelen=titlelen+6))
# print()

data = np.genfromtxt('D:\\resaleflatpricesjan2017.csv', # need to use \\ not \ if not cannot work
                               skip_header=1, 
                               dtype=[('month','U10'), ('town','U50'),('flat_types','U10'), 
                                      ('resale_price', 'f8')],usecols = (0,1,2,10), delimiter=",",
                               
                     missing_values=['na','-'],filling_values=[0])

# Split data into 2019
data_2019 = data[41914:] # split data into 2019
five_room_2019 = (data_2019['flat_types'] == '5 ROOM')
five_room = data_2019[five_room_2019]
# Only include data from the 6 towns
data_north = five_room[np.isin(five_room['town'], 
                                    ['ANG MO KIO', 'BISHAN', 'HOUGANG', 'PUNGGOL', 'SENGKANG', 'TOA PAYOH'])]

# Include the indivual towns
labels = np.unique(data_north['town'])
town_values = data_north['town']
print('Number of North East 5 Room Flats Sold in 2019:', len(town_values))

# Empty variable for counter
amk_value = 0
bishan_value = 0
hougang_value = 0
punggol_value = 0
sengkang_value = 0
toapayoh_value = 0
# Count houses sold for each town
for i in town_values:
    if i == 'ANG MO KIO':
        amk_value += 1
    elif i == 'BISHAN':
        bishan_value += 1
    elif i == 'HOUGANG':
        hougang_value += 1
    elif i == 'PUNGGOL':
        punggol_value += 1
    elif i == 'SENGKANG':
        sengkang_value += 1
    else:
        toapayoh_value += 1

# print(amk_value)
# print(bishan_value)
# print(hougang_value)
# print(punggol_value)
# print(sengkang_value)
# print(toapayoh_value)

# Create array for houses sold
values = [amk_value, bishan_value, hougang_value, punggol_value, sengkang_value, toapayoh_value]
# numbers = ['116', '111', '164', '284', '455', '112']

# Create bar and position it to middle of x ticks
width = 0.5
x = np.arange(len(labels))
fig, ax = plt.subplots(figsize=(10,10))
barchart = ax.bar(x - width/18, values, width)

# Function to label each bar
def barlabel(top):
    for i in top:
        height = i.get_height()
        ax.annotate('{}'.format(height),
                    xy=(i.get_x() + i.get_width() / 2, height),
                    xytext=(0, 1),  # 3 points vertical offset
                    textcoords="offset points",
                    ha='center', va='bottom')
barlabel(barchart)

# Labeling for graph with dash lines to indicate y axis
ax.set_ylabel('Number of houses sold', fontsize = 20)
ax.set_title('North East 5 Room Flats Sold In 2019', fontsize = 20)
ax.set_xticks(x)
ax.set_xticklabels(labels)
plt.grid(color = 'grey', linestyle = '--', linewidth = 2, axis = 'y', alpha = 0.7)

plt.show()


## Price of North East 5 Room Resale HDB in 2019 ##

import numpy as np
import matplotlib.pyplot as plt

# title = "Price of resale flats in 2019"
# titlelen = len(title)
# print("{:*^{titlelen}}".format(title, titlelen=titlelen+6))
# print()

data = np.genfromtxt('D:\\resaleflatpricesjan2017.csv', # need to use \\ not \ if not cannot work
                               skip_header = 1, 
                               dtype = [('month','U10'),  ('town','U50'),('flat_types','U10'), 
                                      ('resale_price', 'f8')],usecols = (0,1,2,10), delimiter = ",",
                               
                     missing_values = ['na','-'],filling_values = [0])

data_2019 = data[41914:] # split data into 2019
five_room_2019 = (data_2019['flat_types'] == '5 ROOM')
five_room = data_2019[five_room_2019]
data_north = five_room[np.isin(five_room['town'], 
                                    ['ANG MO KIO', 'BISHAN', 'HOUGANG', 'PUNGGOL', 'SENGKANG', 'TOA PAYOH'])]

labels = np.sort(list(set(data_north['town'])))                 
# print(labels)
levels = np.arange(len(labels))
levels_values = data_north[['town','resale_price']]
values = levels_values['resale_price']

values_amk = values[levels_values ['town'] == 'ANG MO KIO']
values_bishan = values[levels_values['town'] == 'BISHAN']
values_hougang = values[levels_values['town'] == 'HOUGANG']
values_punggol = values[levels_values ['town'] == 'PUNGGOL']
values_sengkangg = values[levels_values['town'] == 'SENGKANG']
values_toapayoh = values[levels_values ['town'] == 'TOA PAYOH']

values_combined = [values_amk, values_bishan, values_hougang, 
                  values_punggol, values_sengkangg, values_toapayoh]
# print(len(values_combined))

plt.figure(1, figsize = (10,10))
plt.title(title, fontsize = 20)
plt.xlabel('Resale Price ($)',fontsize = 20)
plt.ylabel('Towns',fontsize = 20)
plt.yticks(fontsize = 10)
plt.xticks(fontsize = 10, rotation = 'horizontal')
bp_dict = plt.boxplot(values_combined, labels = labels, patch_artist = True, vert = 0)

## change outline color, fill color and linewidth of the boxes
for box in bp_dict['boxes']:
    # change outline color
    box.set( color = 'red', linewidth = 2)
    # change fill color
    box.set( facecolor = 'red' )
    
## change color and linewidth of the whiskers
for whisker in bp_dict['whiskers']:
    whisker.set(color = 'black', linewidth = 2)

## change color and linewidth of the caps
for cap in bp_dict['caps']:
    cap.set(color = 'black', linewidth = 2)

## change color and linewidth of the medians
for median in bp_dict['medians']:
    median.set(color = 'orange', linewidth = 2)

# ## change the style of fliers and their fill
# for flier in bp_dict['fliers']:
#     flier.set(marker = 'D', color = 'cyan', alpha = 0.5)

for line in bp_dict['medians']:
    # get position data for median line
    x, y = line.get_xydata()[1] # top of median line
    # overlay median value
    plt.text(x, y, '%.0f' % x,
         horizontalalignment = 'center',fontsize = 10) # draw above, centered

plt.grid(color='grey', linestyle='--', linewidth=2, axis='x', alpha=0.7)

plt.show()
